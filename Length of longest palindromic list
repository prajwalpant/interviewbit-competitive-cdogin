/*
Given a linked list of integers. Find and return the length of the longest palindrome list that exists in that linked list. Note: A palindrome list is a list that reads the same backward and forward. Expected memory complexity : O(1) 
Input Format
The only argument given is head pointer of the linked list.
Output Format
Return the length of the longest palindrome list.
Constraints
1 <= length of the linked list <= 2000
1 <= Node value <= 100 
For Example
Input 1:
    2 -> 3 -> 3 -> 3
Output 1:
   3 

Input 2:
    A = 2 -> 1 -> 2 -> 1 ->  2 -> 2 -> 1 -> 3 -> 2 -> 2
Output 2:
    5
*/
/*
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
 //consider every point as a mid point and trverse on both the sides each time
 int count(ListNode* a,ListNode* b )
 {
     int count=0;
     while(a&&b)
     {
         if(a->val==b->val)
         {
             count++;
         }
         else{
             break;
        }
        a=a->next;
        b=b->next;
 }
 return count;
 }

int Solution::solve(ListNode* A) 
{
int ans=0;
 int result=0;
 ListNode* prev=NULL;
 ListNode* curr=A;
 while(curr)
 {
    ListNode* next=curr->next;
    curr->next=prev;
   result=max(result,2*count(prev,next)+1);
    result=max(result,2*count(curr,next));
    prev=curr;
    curr=next;
 }
 return result;
}
