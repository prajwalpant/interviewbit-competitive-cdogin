/*
Sum the Difference
Given an Array of numbers You have to find all possible non-empty subsets of the array of numbers and then, for each subset, find the difference between the largest and smallest numbers in that subset Then add up all the differences to get the number. As the number may be large, output the number modulo 1e9 + 7 (1000000007).
Example:

A = [1, 2]

All subsets
[1]    largest-smallest = 1 - 1 = 0
[2]    largest-smallest = 2 - 2 = 0
[1 2]  largest-smallest = 2 - 1 = 1

Sum of the differences = 0 + 0 + 1 = 1

So resultant number is 1
Constraints:
1 ≤ N ≤ 10000
*/
/*
It can be seen that if elements are sorted then taking any two indexes,
there will be fixed number of K elements in between then.
So you can take any number of K elements which are in between those two elemets.
So the difference of the values of those two indexes will contribute 2 to the power of K (subsets) to the answer.
So we will take all possible pairs of elements. Example:
1 2 3 4
If we take indexes 0 and 3 ie elements 1 and 4. There are 2 elements between them (2, 3).
So 1 and 4 are be in 4 subsets which are
a) 1 4
b) 1 2 4
c) 1 3 4
d) 1 2 3 4
Which is 2 to the power of 2.
The complexity if O(N^2) If we take close look at the approach above,
we can solve it in O(N) also.
After sorting the array,
Answer is {A[N-1]2^(N-1) +A[N-2]2^(N-2) +…..+A[0]2^0} - {A[0]2^(N-1) + A[1]2^(N-2) +……+ A[0]2^0} 
*/
int Solution::solve(vector<int> &A) {
  long long _max = 0;
  long long _min = 0;

  int N = A.size();

  sort(A.begin(), A.end());

  for (int i=0;i<N;i++) {
    _min = (_min*2) % 1000000007;
    _min = (_min + A[i]) % 1000000007;
  }
  for (int i=N-1;i>=0;i--) {
    _max = (_max*2) % 1000000007;
    _max = (_max + A[i]) % 1000000007;
  }

  long long ans = ( _max - _min + 1000000007 ) % 1000000007;
  return ans;
}
