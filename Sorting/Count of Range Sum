/*
Count of Range Sum
Given an array of integers A and two integers B and C. Find the number of range sums that lie in [ B, C ] inclusive. Range sum S(i, j) is defined as the sum of the elements in A between indices i and j (i â‰¤ j), inclusive. 
Input Format
The argument given is the integer array A and two integers B and C.
Output Format
 Find the number of range sums that lie in  [ B, C ] inclusive.
Constraints
1 <= length of the array <= 50000
-10^9 <= A[i] <= 10^9 
For Example
Input 1:
    A = [1, 2, 3]
    B = 4
    C = 6
Output 1:
    2
    Range Sum that lie between 4 and 6 are 6(1+2+3) and 5(2+3)

Input 2:
    A = [-5, 1, -2]
    B = -2
    C = 4
Output 2:
    3
*/
int mergeSort(vector<long>& sum, int lower, int upper, int low, int high)
 {
if(high-low<=1) return 0;
int mid=(low+high)/2, m = mid, n = mid, count =0;
count =mergeSort(sum,lower,upper,low,mid) +mergeSort(sum,lower,upper,mid,high);
 for(int i =low; i< mid; i++)
 {
  while(m < high && sum[m]-sum[i]<lower) m++;
  while(n < high && sum[n] - sum[i] <= upper) n++;
   count += n - m;
        }
inplace_merge(sum.begin()+low, sum.begin()+mid, sum.begin()+high);
return count;
    }
int Solution::solve(vector<int> &A, int B, int C)
{
  int len = A.size();
  vector<long> sum(len+1,0);
  for(int i =0; i<len; i++) sum[i+1] = sum[i]+A[i];
return mergeSort(sum,B,C,0,len+1);
}
