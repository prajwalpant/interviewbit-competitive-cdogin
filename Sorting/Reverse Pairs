/*
Reverse pairs
Given an array of integers A, we call (i, j) an important reverse pair if i < j and A[i] > 2*A[j]. Return the number of important reverse pairs in the given array A. 
Input Format
The only argument given is the integer array A.
Output Format
Return the number of important reverse pairs in the given array A.
Constraints
1 <= length of the array <= 100000
1 <= A[i] <= 10^9 
For Example
Input 1:
    A = [1, 3, 2, 3, 1]
Output 1:
    2

Input 2:
    A = [2, 4, 3, 5, 1]
Output 2:
    3
*/
//use merge sort and do it
//between the merge operation
void __merge(vector<int> &A,int low,int mid,int high, int &count,long long int temp)
{
  vector<int>left;
  vector<int> right;
for(int i=low;i<=mid;i++)
{
left.push_back(A[i]); 
}
for(int i=mid+1;i<=high;i++)
{
right.push_back(A[i]);
}
int i=0,j=0,k=low,save;
while(i<left.size())
{ 
    while(j<right.size() && left[i]>2*right[j])
    {
       temp++; 
       j++;
    }
    count+=(left.size()-i)*temp;
    temp=0;
    i++;
}
 inplace_merge(A.begin()+low,A.begin()+mid+1,A.begin()+high+1);
}
void  __mergesort(vector<int> &A,int low,int high,int &count)
{
if(low<high)
{
    long long int temp=0;
    int mid=low+(high-low)/2;
  __mergesort(A,low,mid,count);
  __mergesort(A,mid+1,high,count);
  __merge(A,low,mid,high,count,temp);
}    
return ;  
}
int Solution::solve(vector<int> &A) 
{
int count=0;
if(A.size()==0){
    return 0;
}
__mergesort(A,0,A.size()-1,count); 
return count;
}
