/*
Given an array of integers A, find the number of sextuplets that satisfy the equation (a * b + c) / d - e = f.
where a, b, c, d, e, f belong to the given array A.
Note: Since the answer can be very large, return the number of ways modulo (109 + 7). 
Input Format
The only argument given is the integer array A.
Output Format
Return the find the number of sextuplets that satisfy the equation.
Constraints
1 <= length of the array <= 100
-10^6 <= A[i] <= 10^6
All elmemts of array A are distinct.
For Example
Input 1:
    A = [1]
Output 1:
    1
    a = b = c = d = e = f = 1 satisfy the equation.

Input 2:
    A = [1, -1]
Output 2:
    24
*/
//just deduce the equation and form a new eqn so that we can do the work in O(n) cube
//use a hashmap for counting the values

#define mod 1000000007
int Solution::solve(vector<int> &A) {
    long long int count=0;
   long long int a,b,c,d,e,f;
   map<long long int,long long int> mymap;
    for(int i=0;i<A.size();i++)
    {
    for(int j=0;j<A.size();j++){
    for(int k=0;k<A.size();k++)
    {
    a=A[i];
    b=A[j];
    c=A[k];
    mymap[a*b+c]++;
          }       
        }
    }
     for(int i=0;i<A.size();i++)
    {
 for(int j=0;j<A.size();j++){
    for(int k=0;k<A.size();k++)
    {
    d=A[i];
    e=A[j];
    f=A[k];
  if(mymap.find(d*(f+e))!=mymap.end()&&d!=0)
  {
      count+=mymap[d*(f+e)];
      count%=mod;
  }
          }       
        }
    }
return (int)(count%mod);  
}
