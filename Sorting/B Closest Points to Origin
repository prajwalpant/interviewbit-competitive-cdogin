/*
B Closest Points to Origin
We have a list A, of points(x,y) on the plane. Find the B closest points to the origin (0, 0). Here, the distance between two points on a plane is the Euclidean distance. You may return the answer in any order. The answer is guaranteed to be unique (except for the order that it is in.) Note: Euclidean distance between two points P1(x1,y1) and P2(x2,y2) is sqrt( (x1-x2)^2 + (y1-y2)^2 ). 
Input Format
The argument given is list A and an integer B.
Output Format
Return the B closest points to the origin (0, 0) in any order.
Constraints
1 <= B <= length of the list A <= 100000
-100000 <= A[i][0] <= 100000
-100000 <= A[i][1] <= 100000
For Example
Input 1:
    A = [   [1, 3],
            [-2, 2]  ]
    B = 1
Output 1:
    [ [-2, 2] ]

Input 2:
    A =[    [3, 3],
            [5, -1],
            [-2, 4]  ]
    B = 2
Output 2:
    [ [3, 3], [-2, 4] ]
*/
/*
//just sort the distance and return the answer
vector<vector<int> > Solution::solve(vector<vector<int>> &A, int B)
{
vector<pair<double,pair<int,int>>> ans;

 double a,b,c;
for(int i=0;i<A.size();i++)
{
a=pow((double)A[i][0],2);
b=pow((double)A[i][1],2);
c=(double)sqrt(a+b);
ans.push_back(make_pair(c,make_pair(A[i][0],A[i][1])));
}
sort(ans.begin(),ans.end());
vector<pair<double,pair<int,int>>>::iterator it;
it=ans.begin();
vector<vector<int>> k;
while(B)
{
    vector<int> temp;
    temp.push_back(it->second.first);
     temp.push_back(it->second.second);
     k.push_back(temp);
     it++;
     B--;
}
return k;
}

*/
