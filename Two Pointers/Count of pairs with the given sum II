/*
Given a sorted array of integers (not necessarily distinct) A and an integer B, find and return how many pair of integers ( A[i], A[j] ) such that i != j have sum equal to B. Since the number of such pairs can be very large, return number of such pairs modulo (109+7). 
Input Format
The first argument given is the integer array A.
The second argument given is integer B.
Output Format
Return the number of pairs for which sum is equal to B modulo (10^9+7).
Constraints
1 <= length of the array <= 100000
1 <= A[i] <= 10^9 
1 <= B <= 10^9
For Example
Input 1:
    A = [1, 1, 1, 2, 3]
    B = 4
Output 1:
    3

Input 2:
    A = [1, 2, 2, 3, 4]
    B = 5
Output 2:
    3
*/

//the approach is to takw two pointers and keep them at both the ends
//i ad the start and j at the end index of array
//now when A[i]+A[j]>B decrement j
//when A[i]+A[j]<B increment i
// when A[i] and A[j] are same you can find the total pairs from j-i+1 C 2
//when not same start a loop and count the number of occurence of both Ai and Aj
//and muliply both of them to answer 
#define mod 1000000007
int Solution::solve(vector<int> &A, int B) 
{
long long int i=0,j=A.size()-1;
long long  int ans=0;
while(i<=j){
    long long int count1=1;
  long long   int count2=1;
    if(A[i]+A[j]==B && A[i]!=A[j])
    {
        while(A[i]==A[i+1]&&i<=A.size()-1){
            count1++;
            i++;
        }
        i=i+1;
        
         while(A[j]==A[j-1] && j>=0){
            count2++;
            j--;
        }
        j=j-1;
      ans+=((count1*count2)); 
      if(i>A.size()-1 || j<0){
            break;
        }
      
      
}
  if(A[i]+A[j]==B && A[i]==A[j])
    {
        ans+=((j-i+1)*(j-i)/2);
        break;
     }
     
if(A[i]+A[j]>B){
   j--; 
}
if(A[i]+A[j]<B){
    i++;
}
}
    return (ans%mod);
}
