/*
Given three sorted arrays A, B and Cof not necessarily same sizes. Calculate the minimum absolute difference between the maximum and minimum number from the triplet a, b, c such that a, b, c belongs arrays A, B, C respectively. i.e. minimize | max(a,b,c) - min(a,b,c) |. Example : Input:
A : [ 1, 4, 5, 8, 10 ]
B : [ 6, 9, 15 ]
C : [ 2, 3, 6, 6 ]
Output:
1
Explanation: We get the minimum difference for a=5, b=6, c=6 as | max(a,b,c) - min(a,b,c) | = |6-5| = 1.
*/
//taking three pointers just we are incrementing that one which is 
//minimum as we have to keep the max and min as close as possible 
//so whatever is the minimum at that time we increment that pointer
int Solution::solve(vector<int> &A, vector<int> &B, vector<int> &C) 
{
 int i=0,j=0,k=0;
 int ans=INT_MAX;
 int temp_max=INT_MIN,temp_min=INT_MAX;
 int maxii=temp_max,mini=temp_min;
 while((i<A.size())&&(j<B.size())&&(k<C.size()))
 {
   temp_max=max(A[i],B[j]);
   maxii=max(temp_max,C[k]);
   temp_min=min(A[i],B[j]);
   mini=min(temp_min,C[k]);
  ans=min(ans,abs(maxii-mini)); 
 if(mini==A[i])
 i++;
 if(mini==B[j])
 j++;
 if(mini==C[k])
 k++;     
 }
 return ans;
}
