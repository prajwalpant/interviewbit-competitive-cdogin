/*Given an array of positive integers A and an integer B, find and return first continuous subarray which adds to B. If the answer does not exist return an array with a single element "-1". Note: First sub-array means the sub-array for which starting index in minimum. 
Input Format
The first argument given is the integer array A.
The second argument given is integer B.
Output Format
Return the first continuous sub-array which adds to B and if the answer does not exist return an array with a single element "-1".
Constraints
1 <= length of the array <= 100000
1 <= A[i] <= 10^9 
1 <= B <= 10^9
For Example
Input 1:
    A = [1, 2, 3, 4, 5]
    B = 5
Output 1:
    [2, 3]

Input 2:
    A = [5, 10, 20, 100, 105]
    B = 110
Output 2:
    [-1]
    */
//using two pointers apporach i and j , take a sum variable 
//if the current sum is less than B then increment the j if sum exceeds b then increment i 
//and keep the track of i and j if the sum sumtches break the loop and print from i to j.
vector<int> Solution::solve(vector<int> &A, int B) {
long long int sum=A[0];
int i=0;
int j=0;
vector<int> ans;
long long int a=0;
for(int i=0;i<A.size();i++){
    a+=A[i];
}
bool chk=false;
if(a<B){
     ans.push_back(-1);
     return ans;
}
else{
while(j<=A.size()-1)
{
if(sum==B){
    chk=true;
    break;
}
if(sum>B){
    sum-=(long long)A[i];
    i++;
   
}
if(sum<B){
    j++;
    sum+=(long long)A[j];
}
}
if(chk){
 for(int x=i;x<=j;x++){
     ans.push_back(A[x]);
 }
}
else{
    ans.push_back(-1);
}
 return ans;
 
}
 }
