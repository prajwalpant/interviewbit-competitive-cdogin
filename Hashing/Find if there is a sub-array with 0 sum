/*
Given an array of integers A, find and return whether the given array contains a subarray with a sum equal to 0. If the given array contains a sub-array with sum zero return 1 else return 0. Note: Length of sub array should be at least one. 
Input Format
The only argument given is the integer array A.
Output Format
Return whether the given array contains a subarray with a sum equal to **0**.
Constraints
1 <= length of the array <= 100000
-10^9 <= A[i] <= 10^9 
For Example
Input 1:
    A = [1, 2, 3, 4, 5]
Output 1:
    0

Input 2:
    A = [5, 17, -22, 11]
Output 2:
    1
*/
int Solution::solve(vector<int> &A) {
  set<long long int> check; 
 vector<long long int> v;
 long long int sum=0;
 //this is na nice approach as zero can repeat in a subarray from startin so it is necesaary to put zero
 //in front or you can check inside loop also
  v.insert(v.begin(),sum);
 for(int i=0;i<A.size();i++)
 {
     sum+=(long long)A[i];
     v.push_back(sum);
 }

for(int i=0;i<v.size();i++){
    if(check.find(v[i])!=check.end())
    {
      return 1;
    }
    else
    {
        check.insert(v[i]);
    }
}
return 0;
}

