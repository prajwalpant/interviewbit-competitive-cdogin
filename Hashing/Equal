/*
Equal
Given an array A of integers, find the index of values that satisfy A + B = C + D, where A,B,C & D are integers values in the array Note:
1) Return the indices `A1 B1 C1 D1`, so that 
  A[A1] + A[B1] = A[C1] + A[D1]
  A1 < B1, C1 < D1
  A1 < C1, B1 != D1, B1 != C1 

2) If there are more than one solutions, 
   then return the tuple of values which are lexicographical smallest. 

Assume we have two solutions
S1 : A1 B1 C1 D1 ( these are values of indices int the array )  
S2 : A2 B2 C2 D2

S1 is lexicographically smaller than S2 iff
  A1 < A2 OR
  A1 = A2 AND B1 < B2 OR
  A1 = A2 AND B1 = B2 AND C1 < C2 OR 
  A1 = A2 AND B1 = B2 AND C1 = C2 AND D1 < D2
Example:
Input: [3, 4, 7, 1, 2, 9, 8]
Output: [0, 2, 3, 5] (O index)
If no solution is possible, return an empty list.
*/
//in hashing you can also check at that time only whenever you are putting in hash
//whether a particular elemnt exist in hash or not you dont need to fill the 
//hash then check this is the very good trick
//her ewhat we are doing is we are taking all possible pairs in n sqaure
// and side by side filling the hash and we side by side check whether a pair sum repeats
//if repeats we verify the given conditions and return the ans.
vector<int> Solution::equal(vector<int> &A)
{
vector<int> ans;
unordered_map<int,pair<int,int>> hash;
if(A.size()<4)
return ans;

for(int i=0;i<A.size();i++)
{
   for(int j=i+1;j<A.size();j++)
   {
       int sum=A[i]+A[j];
       if(hash.find(sum)==hash.end())
       {
           hash[sum]=make_pair(i,j);
       }
       else
       {
          pair<int,int> p=hash[sum];
          if(p.first<i&&p.second!=i&&p.second!=j)
          {
              
              vector<int> temp;
              temp.push_back(p.first);
              temp.push_back(p.second);
              temp.push_back(i);
              temp.push_back(j);
             if(ans.size()==0)
             {
                 ans=temp;
             }
             else
             {
              for(int r=0;r<ans.size();r++)
              {
                if(temp[r]<ans[r]) 
                {
                  ans=temp;
                  break;
                }
                else if(temp[r]==ans[r])
                continue;
                else
                break;
              }
             }
         }
       }
   }
}
    return ans;
}
