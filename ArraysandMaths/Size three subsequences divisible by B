/*Given an array of integers A and an integer B. Find and return the number of subsequences of length 3 whose sum is divisible by B. Since the total number of subsequences may be very large. Return the total number of subsequences of length 3 whose sum is divisible by B modulo (109+7). 
Input Format
The only argument given is the integer array A.
Output Format
Return the number of subsequences of length 3 whose sum is divisible by B modulo (10^9+7). 
Constraints
1 <= length of the array <= 100000
1 <= A[i] <= 10^9 
1 <= B <= 10^3
For Example
Input 1:
    A = [6, 1, 1, 4, 1, 5, 3]
    B = 2
Output 1:
    20

Input 2:
    A = [4, 10, 9]
    B = 5
Output 2:
    0
    */
    // as (a+b+c)%mod=((a%mod +b%mod)%mod +c%mod)%mod
//just doing O(n^2) over it and using combinations. 
#define mod 1000000007
int Solution::solve(vector<int> &A, int B) 
{
    int ans=0; 
    vector<int> hash(B,0);
    for(int i=0;i<A.size();i++) { 
        int save=A[i]%B;
        hash[save]++; 
    } 
    for (int i=0;i<B;i++) { 
        for (int j=i;j<B;j++) { 
            int temp=(B-(i+j)%B)%B; 
            if (temp<j) 
                continue; 
            if (i==j &&temp==j) 
                ans+=(long long)hash[i]*(long long)(hash[i]-1)*(long)(hash[i]-2)/6; 
            else if(i==j) 
                ans+=(long long)hash[i]*(long long)(hash[i]-1)*(long long)hash[temp]/2; 
            else if(i==temp) 
                ans+=(long long)hash[i]*(long long)(hash[i]-1)*(long long)hash[j]/2; 
            else if(temp==j) 
                ans+=(long long)hash[j]*(long long)(hash[j]-1)*(long long)hash[i]/2; 
            else
                ans+=(long long)hash[i]*(long long)hash[j]*(long long)hash[temp]; 
                ans%=mod;
        } 
        ans%=mod;
    } 
    return ans%mod; 
}
