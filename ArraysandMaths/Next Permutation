/*
Next Permutation
Implement the next permutation, which rearranges numbers into the numerically next greater permutation of numbers for a given array A of size N. If such arrangement is not possible, it must be rearranged as the lowest possible order i.e., sorted in an ascending order. Note:
1. The replacement must be in-place, do **not** allocate extra memory.
2. DO NOT USE LIBRARY FUNCTION FOR NEXT PERMUTATION. Use of Library functions will disqualify your submission retroactively and will give you penalty points.
Input Format:
The first and the only argument of input has an array of integers, A.
Output Format:
Return an array of integers, representing the next permutation of the given array.
Constraints:
1 <= N <= 5e5
1 <= A[i] <= 1e9
Examples:
Input 1:
    A = [1, 2, 3]

Output 1:
    [1, 3, 2]

Input 2:
    A = [3, 2, 1]

Output 2:
    [1, 2, 3]

Input 3:
    A = [1, 1, 5]

Output 3:
    [1, 5, 1]

Input 4:
    A = [20, 50, 113]

Output 4:
    [20, 113, 50]
*/


//logic is to check everytime last two and iterate towards zeroth index
//if you find A[i-1]<A[i] at anyplace break at that point
//now you can swap A[i] and A[i-1] but not now this can also be possible
//there is some value after A[i] i.e towards right which is less than A[i] but greater than A[i-1]
//if you find that value swap with that in the array and the after swapping sort the array exact after your new A[i].
void Solution::nextPermutation(vector<int> &A) 
{
int i=0 ,j=0;
for(i=A.size()-1;i>=0;i--){
  if(A[i-1]<A[i])
  {
      break;
  }
}
 if(i==0){
      sort(A.begin(),A.end());
      return ;
  }
  int save=i-1;
  int no=A[save];
  int min=A[save+1];
  int save2=save+1;
  for(int j=save+1;j<A.size();j++)
  {
     if(min>A[j]&& A[j]>no)
     {
         min=A[j];
         save2=j;
     } 
}
int temp=A[save];
A[save]=A[save2];
A[save2]=temp;
sort(A.begin()+save+1,A.end());
}
