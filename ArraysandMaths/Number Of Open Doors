/*
Given an integer A which denotes the number of doors in a row numbered 1 to A. All the doors are closed initially. A person moves to and fro changing the states of the doors as follows: the person opens a door that is already closed and closes a door that is already opened. In the first go, the person alters the states of doors numbered 1, 2, 3, … , A. In the second go, she alters the states of doors numbered 2, 4, 6 … In the third go, she alters the states of doors numbered 3, 6, 9 … This continues till the A'th go in which you alter the state of the door numbered A. Find and return the number of open doors at the end of the procedure. 
Input Format
The only argument given is integer A.
Output Format
Return the number of open doors at the end of the procedure.
Constraints
1 <= A <= 10^9
For Example
Input 1:
    A = 10
Output 1:
    3

Input 2:
    A = 20
Output 2:
    4
*/

//here we have to analyse as how many times a door is getting touched
//nth door is touched no of factors times of n
//so w have to analyse that those doors who have even no of factors will remain close OCOC
//and those who have odd no of factors will be open OCO
//so a number has odd no of factors if it is a perfect square as factors are in symetrey 
//so we have to just find the total perfect square in b/w 1 to A
//total perfect sqaure present in between 1 to A is sqrt(A);

int Solution::solve(int A) {
   return int(sqrt(A));
}
