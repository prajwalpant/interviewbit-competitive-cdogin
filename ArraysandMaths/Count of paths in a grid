//as you dont have to cross the major diagonal 
//so you have to see that number of down moves are always greater
//then the number of rigth moves
//this problem now boils down to find the n-1 catalan number

#define ll long long int
#define mod (1000000007LL)
#define sz 2000005

ll fact[sz];
bool computed = false;

void getfact(){
    if(computed) return;
    computed = true;
    
    fact[0] = 1LL;
    for(int i=1; i<sz; i++){
        fact[i] = fact[i-1] % mod * i % mod;
    }
}

ll power(ll x, ll y){
    ll res = 1LL;
    x = x % mod;
    
    while(y > 0){
        if(y & 1LL)
            res = res * x % mod;
        y = y / 2LL;
        x = x * x % mod;
    }
    
    return res;
}

ll modinv(ll x){
    return power(x, mod-2);
}

ll nCr(ll n, ll r){
    if(r==0) return 1;
    
    return fact[n] % mod * modinv(fact[n-r]) % mod * modinv(fact[r]) % mod;
}

int Solution::solve(int n) {
  n=n-1;
    getfact();
    ll c = nCr(2*n, n) % mod;
    c = c % mod * modinv(n+1) % mod;
    
    return c;
}
