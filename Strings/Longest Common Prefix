/*
Longest Common Prefix
Given the array of strings A, you need to find the longest string S which is the prefix of ALL the strings in the array. Longest common prefix for a pair of strings S1 and S2 is the longest string S which is the prefix of both S1 and S2. For Example, longest common prefix of "abcdefgh" and "abcefgh" is "abc". 
Input Format
The only argument given is an array of strings A.
Output Format
Return longest common prefix of all strings in A.
For Example
Input 1:
    A = ["abcdefgh", "aefghijk", "abcefgh"]
Output 1:
    "a"
    Explanation 1:
        Longest common prefix of all the strings is "a".

Input 2:
    A = ["abab", "ab", "abcd"];
Output 2:
    "ab"
    Explanation 2:
        Longest common prefix of all the strings is "ab".
*/
//longest common will only be till the legth of minimum string in
//whole array find out the minimum and check one by one where it is not folowing the cond for common prefix
//just brek at that time
string Solution::longestCommonPrefix(vector<string> &A) 
{
string ans="";
if(A.size()==0)
{
    return ans;
}
if(A.size()==1)
{
    return A.front();
}
int min_length=INT_MAX;
string main="";
for(int i=0;i<A.size();i++)
{
    if(A[i].size()<min_length)
    {
        min_length=A[i].size();
        main=A[i];
    }
}
for(int i=0;i<main.size();i++)
 {
   for(int j=0;j<A.size();j++)
   {
       if(A[j][i]!=main[i])
       {
           return ans;
       }
   }
     ans+=main[i];
}

return ans;
}

