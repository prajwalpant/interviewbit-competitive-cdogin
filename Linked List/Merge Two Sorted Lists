/*
Merge Two Sorted Lists
Merge two sorted linked lists and return it as a new list. The new list should be made by 
splicing together the nodes of the first two lists, and should also be sorted. For example, given following linked lists :
  5 -> 8 -> 20 
  4 -> 11 -> 15
The merged list should be :
4 -> 5 -> 8 -> 11 -> 15 -> 20
*/
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
/*
First thing to note is that all you would want to do is modify the next pointers.
You don’t need to create new nodes. At every step, you choose the minumum of the
current head X on the 2 lists, and modify your answer’s next pointer to X.
You move the current pointer on the said list and the current answer. Corner case,
Make sure that at the end of the loop, when one of the list goes empty, you do include remaining 
elemnts from the second list into your answer. Test case : 1->2->3 4->5->6
*/

ListNode* Solution::mergeTwoLists(ListNode* A, ListNode* B) 
{
 ListNode* head=NULL;
 ListNode* trav=NULL;
 while(A!=NULL && B!=NULL)
 {
   if(A->val<=B->val)
   {
       if(head==NULL)
       {
           head=A;
           trav=A;
        //   trav->next=NULL;
           A=A->next;
       }
       else{
           trav->next=A;
           trav=trav->next;
         //  trav->next=NULL;
           A=A->next;
           }
   }
   else{
       if(head==NULL)
       {
           head=B;
           trav=B;
          // trav->next=NULL;
           B=B->next;
       }
        else
        {
           trav->next=B;
           trav=trav->next;
           //trav->next=NULL;
           B=B->next;
           }
       }
 }
 while(A!=NULL)
 {
     trav->next=A;
     trav=trav->next;
    // trav->next=NULL;
     A=A->next;
 }
  while(B!=NULL)
 {
     trav->next=B;
     trav=trav->next;
   //  trav->next=NULL;
     B=B->next;
 }
 trav->next=NULL;
 
return head;
    
}
