/*
Remove Duplicates from Sorted List II
Given a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list. 
For example, Given 1->2->3->3->4->4->5, return 1->2->5. Given 1->1->1->2->3, return 2->3.
*/
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
 
 /*
 Skip the node where head->next != NULL && head->val == head->next->val. Maintain a “pre” node which is the node just previous to the block of head you are checking. Make sure you take care of corner cases :
1) Do you handle repetitions at the end ? ex : 1 -> 1
2) Do you handle cases where there is just one element ? ex : 1
3) Do you handle cases where there is just one element repeated numerous times ? 1->1->1->1->1->1
 */
ListNode* Solution::deleteDuplicates(ListNode* A)
{
    if(A==NULL)
   { return NULL;}
    
     if(A->next==NULL)
    {
        return A;
    }
ListNode* trav=A;
ListNode* head=NULL;
ListNode* temp=NULL;
unordered_map<int,int> mymap;
while(trav!=NULL)
{
    mymap[trav->val]++;
    trav=trav->next;
}
trav=A;
while(trav!=NULL)
{
    if(mymap[trav->val]==1&&head!=NULL)
    {
        temp->next=trav;
        temp=trav;
     //   cout<<trav->val<<"^^";
    }
       if(head==NULL&&mymap[trav->val]==1)
    {
        head=trav;
        temp=head;
     //   cout<<trav->val<<"%%";
    }
     trav=trav->next;
}
if(head!=NULL)
{
temp->next=trav;
}
return head;

}
