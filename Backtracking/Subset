/*
Subset
Given a set of distinct integers, S, return all possible subsets.
 Note:
Elements in a subset must be in non-descending order.
The solution set must not contain duplicate subsets.
Also, the subsets should be sorted in ascending ( lexicographic ) order.
The list is not necessarily sorted.
Example : If S = [1,2,3], a solution is:
[
  [],
  [1],
  [1, 2],
  [1, 2, 3],
  [1, 3],
  [2],
  [2, 3],
  [3],
]
*/

//For every element, you have 2 options. You may either include the element in your subset or you will not include 
//the element in your subset.
//Make the recursive call for both the cases. 
void myfunction(vector<int> &A,vector<int> &subset,vector<vector<int>> &ans,int i )
{
   ans.push_back(subset);
    for(int j=i;j<A.size();j++){
    subset.push_back(A[j]);
    myfunction(A,subset,ans,j+1);
    subset.pop_back();
    }
    return ;
}
vector<vector<int> > Solution::subsets(vector<int> &A) {
    vector<vector<int> > ans;
    vector<int> subset;
    sort(A.begin(),A.end());
    myfunction(A,subset,ans,0);
    sort(ans.begin(),ans.end());
    return ans;
}



