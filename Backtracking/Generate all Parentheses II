/*
Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses of length 2*n. For example, given n = 3, a solution set is:
"((()))", "(()())", "(())()", "()(())", "()()()"
Make sure the returned list of strings are sorted.
*/
//the choice is whether to take the parenthesis nor not like we do in subset problem
// but here we have to choose only valid parenthesis and for validity
//opening brakets must be greater than closing brackets
void backtracking(int open,int close,vector<char> temp,vector<string> &ans,int A,int i)
{
if(close==A)
   { string str="";
      for(int i=0;i<temp.size();i++){
          str+=temp[i];
      }
      ans.push_back(str);
      return ; 
   } 
   if(open<A){
       temp[i]='(';
        backtracking(open+1,close,temp,ans,A,i+1);
      }
   if(open>close)
   {
       temp[i]=')';
       backtracking(open,close+1,temp,ans,A,i+1);
   }
     return ;
    
}
vector<string> Solution::generateParenthesis(int A)
{
vector<string> ans;
vector<char> temp(2*A);
backtracking(0,0,temp,ans,A,0);
return ans;
}


