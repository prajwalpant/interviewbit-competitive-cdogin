/*Kth Permutation Sequence
The set [1,2,3,…,n] contains a total of n! unique permutations. By listing and labeling all of the permutations in order, We get the following sequence (ie, for n = 3 ) :
1. "123"
2. "132"
3. "213"
4. "231"
5. "312"
6. "321"
Given n and k, return the kth permutation sequence. For example, given n = 3, k = 4, ans = "231"
 Good questions to ask the interviewer :
What if n is greater than 10. How should multiple digit numbers be represented in string?
 In this case, just concatenate the number to the answer. so if n = 11, k = 1, ans = "1234567891011" 
Whats the maximum value of n and k?
 In this case, k will be a positive integer thats less than INT_MAX. n is reasonable enough to make sure the answer does not bloat up a lot.
 */
 /*
This involves a little bit of maths and recursion for simplicity. Number of permutation possible using n distinct numbers = n! Lets first make k 0 based.
Let us first look at what our first number should be.
Number of sequences possible with 1 in first position : (n-1)!
Number of sequences possible with 2 in first position : (n-1)!
Number of sequences possible with 3 in first position : (n-1)! Hence, the number at our first position should be k / (n-1)! + 1 th integer. Can we reduce the k and modify the set we pick our 
numbers from ( initially 1 2 3 … n ) to call the function for second position onwards ? */
int fact[13];
void generate_factorials() {
    fact[0] = 1;
    int p = fact[0];
    for(int i = 1; i <= 12; i++) {
        p *= i;
        fact[i] = p;
    }
}

int factorial(int n) {
    if(n > 12) {
        return INT_MAX;
    }
    
    return fact[n];
}

string kth_permutation(vector<string> nums, int k) {
    int n = nums.size();
    if(n == 0) {
        return "";
    }
    
    int first_index = k / factorial(n - 1);
    string first_digit = nums[first_index];
    k %= factorial(n - 1);
    nums.erase(nums.begin() + first_index);
    
    return first_digit.append(kth_permutation(nums, k));
}

string Solution::getPermutation(int A, int B) {
    generate_factorials();
    vector<string> nums(A);
    for(int i = 0; i < A; i++) {
        nums[i] = to_string(i + 1);
    }
    
    return kth_permutation(nums, B - 1);
}
