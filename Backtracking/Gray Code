/*
Gray Code
The gray code is a binary numeral system where two successive values differ in only one bit. Given a non-negative integer n representing the total number of bits in the code, print the sequence of gray code. A gray code sequence must begin with 0. For example, given n = 2, return [0,1,3,2]. Its gray code sequence is:
00 - 0
01 - 1
11 - 3
10 - 2
There might be multiple gray code sequences possible for a given n. Return any such sequence.
*/
//You can notice that if a sequence is gray code, then its reverse is also a gray code.
//using refection add 0 and 1 accordingly

/*
Note the following : Let G(n) represent a gray code of n bits.
Note that reverse of G(n) is also a valid sequence.
Let R(n) denote the reverse of G(n). Note that we can construct
G(n+1) as the following :
0G(n)
1R(n) Where 0G(n) means all elements of G(n) prefixed with 0 bit and 1R(n) means all elements of R(n) prefixed with 1.
Note that last element of G(n) and first element of R(n) is same. So the above sequence is valid. Example G(2) to G(3) :
0 00
0 01
0 11
0 10
1 10
1 11
1 01
1 00
*/

vector<int> Solution::grayCode(int A) 
{
vector<int> l11;
l11.push_back(0);
l11.push_back(1);
if(A==0)
{
l11.pop_back();
return l11;
}
if(A==1)
{
return l11;
}
vector<int> ans;
vector<string> l1;
l1.push_back("0");
l1.push_back("1");
for(int i=2;i<=A;i++)
{
   vector<string> l2;
   l2=l1;
   reverse(l2.begin(),l2.end());
   
   for(int j=0;j<l1.size();j++)
   {
       l1[j]="0"+l1[j];
       l2[j]="1"+l2[j];
   }
  
  l1.insert(l1.end(),l2.begin(),l2.end());
}
for(int i=0;i<l1.size();i++)
{
  int b = stoull(l1[i],0,2);
  ans.push_back(b);
}
return ans;
}
