/*
Permutations
Given a collection of numbers, return all possible permutations. Example: [1,2,3] will have the following permutations:
[1,2,3]
[1,3,2]
[2,1,3] 
[2,3,1] 
[3,1,2] 
[3,2,1]
 NOTE
No two entries in the permutation sequence should be the same.
For the purpose of this problem, assume that all the numbers in the collection are unique.
Warning : DO NOT USE LIBRARY FUNCTION FOR GENERATING PERMUTATIONS. Example : next_permutations in C++ / 
itertools.permutations in python. If you do, we will disqualify your submission retroactively and give you penalty points.
*/
//Again, what helps here is thinking in terms of recursion. At each step you can keep any of 
//the elements from the remaining one and permute remaining one excluding current one.
void swap(int &x,int &y)
{
    int temp=x;
    x=y;
    y=temp;
}
void permutations(vector<int>&A,int i,int n,vector<vector<int> >&ans)
{
   if(i==n){
       ans.push_back(A);
   }
   else
   {
       for(int j=i;j<=n;j++)
       {
           swap(A[i],A[j]);
           permutations(A,j+1,n,ans);
           swap(A[i],A[j]);
        }
   }
}
vector<vector<int> > Solution::permute(vector<int> &A)
{
int i=0;
vector<vector<int> > ans;
int n=A.size()-1;
permutations(A,i,n,ans);

for(int i=0;i<ans.size();i++)
{
    for(int j=0;j<ans[i].size();j++)
    {
        cout<<ans[i][j]<<" ";
    }
    cout<<endl;
}
return ans;
}
