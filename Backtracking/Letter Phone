/*
Given a digit string, return all possible letter combinations that the number could represent. A mapping of digit to letters (just like on the telephone buttons) is given below.  The digit 0 maps to 0 itself. The digit 1 maps to 1 itself.
Input: Digit string "23"
Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].
*/
//for bactracking
/*
3 steps to follow
1.)do
2.)recurr on that
3.)then undo that what you have done
*/

void backtracking(string &A,vector<string> &ans,vector<char> &temp,unordered_map<char,string>&mymap,int i)
{
    
    if(i>A.length()-1)
    {
   
        string str="";
        for(int k=0;k<temp.size();k++){
          str+=temp[k];  
        }
      
       ans.push_back(str);
       return;
 }
    string save=mymap[A[i]];
    for(int j=0;j<save.length();j++)
    {
        temp.push_back(save[j]);
        backtracking(A,ans,temp,mymap,i+1);
        temp.pop_back();
  }
    return ;
}

vector<string> Solution::letterCombinations(string A)
{
vector<string> ans;
vector<char> temp;
unordered_map<char,string>mymap={
    {'1',"1"},
    {'2',"abc"},
    {'3',"def"},
    {'4',"ghi"},
    {'5',"jkl"},
    {'6',"mno"},
    {'7',"pqrs"},
    {'8',"tuv" },
    {'9',"wxyz" },
    {'0',"0" }
};
backtracking(A,ans,temp,mymap,0);
return ans;
}









