/*
Given an array of integers A, find and return the maximum result of A[i] XOR A[j], where i, j are the indexes of the array. 
Input Format
The only argument given is the integer array A.
Output Format
Return the maximum result of A[i] XOR A[j].
Constraints
1 <= length of the array <= 100000
0 <= A[i] <= 10^9 
For Example
Input 1:
    A = [1, 2, 3, 4, 5]
Output 1:
    7

Input 2:
    A = [5, 17, 100, 11]
Output 2:
    117
*/

//very smart approach
//I follow the solution on Leetcode discuss
//   https://leetcode.com/problems/maximum-xor-of-two-numbers-in-an-array/discuss/91049/java-on-solution-using-bit-manipulation-and-hashmap
int Solution::solve(vector<int> &nums)
{
 int mask = 0, max = 0;
        for (int i = 31; i >= 0; i--) {
            mask |= (1 << i);
            set<int>  prefixes;
            for (int n : nums) {
                prefixes.insert(mask & n);
            }
            int tmp = max | (1 << i);
            for (int pre : prefixes) {
                if (prefixes.find(tmp ^ pre)!=prefixes.end()) {
                    max = tmp;
                    break;
                }
            }
        }
        return max;    
}








//trie based approach but gives memory limit exceeded in interviewbit works fine in leetcode
/*struct TrieNode
{
unordered_map<bool,TrieNode*> children;
int number;
};
void construct_trie(TrieNode* root,int number)
{
    TrieNode* temp;
    temp=root;
    bool save;
    for(int i=31;i>=0;i--)
    {
        save=(number&(1<<i));
        if(temp->children.find(save)==temp->children.end())
        {
            TrieNode* newnode=new TrieNode;
            temp->children[save]=newnode;
        }
         temp=temp->children[save];
    }
    temp->number=number;
}
long long return_max_xor(TrieNode* root,int number)
{
    TrieNode* temp;
    temp=root;
    bool complimentof;
    for(int i=31;i>=0;i--)
    {
    complimentof=(number&(1<<i));
    if(temp->children.find(!complimentof)!=temp->children.end())
    {
     temp=temp->children[!complimentof];
    }
    else 
    {
        temp=temp->children[complimentof];
    }
 }
    return (long long)(number^(temp->number));
}
int Solution::solve(vector<int> &A) 
{
TrieNode* root=new TrieNode;
for(int i=0;i<A.size();i++)
{
    construct_trie(root,A[i]);
}
long long max_xor=INT_MIN;
for(int i=0;i<A.size();i++)
{
max_xor=max(max_xor,return_max_xor(root,A[i]));
}
return (int)max_xor;  
}
*/












