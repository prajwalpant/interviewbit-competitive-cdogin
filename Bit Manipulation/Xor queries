/*
You are given an array (containing only 0 and 1) as element of N length. Given L and R, 
you need to determine value of XOR of all elements from L to R (both inclusive) and number of unset bits (0's)
in the given range of the array. Input
First argument contains the array of size N containing 0 and 1 only (1<=N<=100000). 

Second argument contains a 2D array with Q rows and 2 columns, each row represent a query with 2 columns representing L and R. 

(1<=Q<=100000), (1<=L<=R<=N).
Output
Return an 2D array of Q rows and 2 columns i.e the xor value and number of unset bits in that range respectively for each query.
Examples Input
1 0 0 0 1
2 4
1 5 
3 5
Output
0 3
0 3
1 2
Explanation Testcase 1-
In the given case the bit sequence is of length 5 and the sequence is 1 0 0 0 1. For query 1 the range is (2,4), 
and the answer is (array[2] xor array[3] xor array[4]) = 0,
and number of zeroes are 3, so output is 0 3. Similarly for other queries.
*/
//just count the no fo zeroes and no of ones to the left side of any index
//and you can find the no of zeroes and and between the ranges very easily
//now do just trivial mathematics and find the answer
vector<vector<int> > Solution::solve(vector<int> &A, vector<vector<int> > &B) 
{
map<int,int> prebuildzero;
map<int,int>prebuildone;
prebuildzero[0]=0;
prebuildone[0]=0;

for(int i=0;i<A.size();i++)
{
    if(A[i]==0)
    {
        prebuildzero[i+1]=prebuildzero[i]+1;
    }
    else
    {
      prebuildzero[i+1]=prebuildzero[i];  
    }
}
for(int i=0;i<A.size();i++)
{
    if(A[i]==1)
    {
        prebuildone[i+1]=prebuildone[i]+1;
    }
    else
    {
      prebuildone[i+1]=prebuildone[i];  
    }
}
vector<vector<int>> ans;
for(int i=0;i<B.size();i++)
{
    int l=B[i][0];
    int r=B[i][1];
    int noofzeroes=prebuildzero[r]-prebuildzero[l-1];
    int x;
    int noofones=prebuildone[r]-prebuildone[l-1];
    if(noofzeroes%2==0&&noofones%2==0)
    {
        x=0;
    }
    else if(noofzeroes%2!=0&&noofones%2!=0)
    {
        x=1;
    }
    else if(noofzeroes%2!=0&&noofones%2==0)
    {
        x=0;
    }
    else
    {
        x=1;
    }
  vector<int> temp;
   temp.push_back(x);
   temp.push_back(noofzeroes);
 
  ans.push_back(temp);
}
return ans;
   
}
