/*
Given an array of integers, every element appears thrice except for one which occurs once. Find that element which does not appear thrice. Note: Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory? Input Format:
    First and only argument of input contains an integer array A
Output Format:
    return a single integer.
Constraints:
2 <= N <= 5 000 000  
0 <= A[i] <= INT_MAX
For Examples :
Example Input 1:
    A = [1, 2, 4, 3, 3, 2, 2, 3, 1, 1]
Example Output 1:
    4
Explanation:
    4 occur exactly once
Example Input 2:
    A = [0, 0, 0, 1]
Example Output 2:
    1
*/

//the approach is write all the numebrs i bit format
//every number occurs three tims one number is odd
//we just need the counts of 1 to convert to that answer
//the last bit which is extra like not in a pair of 3 that extra bit is the current bit

int Solution::singleNumber(const vector<int> &A)
{
 int ans=0;
 int save;
 for(int j=0;j<32;j++)
 {
     int cn=0;
     for(int i=0;i<A.size();i++)
     {
        save=1<<j ;
        if((A[i]&(save))>0)
        {
           cn++; 
        }
     }
     if(cn%3==1)
     {
       ans+=1*pow(2,j);  
     }
 }
 return ans;
}
