/*
Hamming distance between two non-negative integers is defined as the number of positions at which the corresponding bits are different. For example, HammingDistance(2, 7) = 2, as only the first and the third bit differs in the binary representation of 2 (010) and 7 (111). Given an array of N non-negative integers, find the sum of hamming distances of all pairs of integers in the array. Return the answer modulo 1000000007. Example
Let f(x, y) be the hamming distance defined above.

A=[2, 4, 6]

We return,
f(2, 2) + f(2, 4) + f(2, 6) + 
f(4, 2) + f(4, 4) + f(4, 6) +
f(6, 2) + f(6, 4) + f(6, 6) = 

0 + 2 + 1
2 + 0 + 1
1 + 1 + 0 = 8
*/

//just taking each bit of all numbers in the array and counting number of ones and number of zeroes
//for a particular bit multiply cont of zero and count of one it will give the total no of pairs which have different bit
//for a particular bit
//we have multiplied it with two because we are counting a pair two times ie both ways
#define mod 1000000007
int Solution::hammingDistance(const vector<int> &A)
{
int ans=0;
  for(int i=31;i>=0;i--)
  {
      int count_zero=0;
      int count_one=0;
      for(int j=0;j<A.size();j++)
      {
        if((A[j]&(1<<i))>0)
        {
            count_one++;
        }
      }
      count_zero=A.size()-count_one;
      ans+=((((long long)count_zero%mod*(long long)count_one%mod)%mod)*(2%mod))%mod;
      ans%=mod;
  }
  return ans%mod;
}


