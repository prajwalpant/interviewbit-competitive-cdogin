/*Repeat and Missing Number Array
You are given a read only array of n integers from 1 to n. Each integer appears exactly once except A which appears twice and B which is missing. Return A and B. Note: Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory? Note that in your output A should precede B. Example:
Input:[3 1 2 5 3] 

Output:[3, 4] 

A = 3, B = 4
*/
vector<int> Solution::repeatedNumber(const vector<int> &A) {
long long  int st=0,stt=0,sa=0,saa=0;
long long  int r,m,i;
long long int n=A.size();
for( i=0;i<A.size();i++){
    st+=(long long int)A[i];
    stt+=(long long int)A[i]*A[i];
}

 long long int c1,c2;
 sa=(n*(n+1))/2;
 saa=(n*(n+1)*(2*n+1))/6;
 c1=st-sa;
 c2=stt-saa;
 r=(c2/c1+c1)/2;
 m=r-c1;
 vector<int> v;
 v.push_back(r);
 v.push_back(m);
return v;
}
