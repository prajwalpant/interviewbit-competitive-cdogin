/*
Given a binary string A. It is allowed to do at most one swap between any 0 and 1. Find and return the length of the longest consecutive 1’s that can be achieved. 
Input Format
The only argument given is string A.
Output Format
Return the length of the longest consecutive 1’s that can be achieved.
Constraints
1 <= length of string <= 1000000
A contains only characters 0 and 1.
For Example
Input 1:
    A = "111000"
Output 1:
    3

Input 2:
    A = "111011101"
Output 2:
    7
*/

//findig the prefix max of 1's from left and suffix max from right
//just now at zero places we need to add both we will check how many max one we can club together
//keep the count of total number of ones which is very crucial step here
int Solution::solve(string A) {
int total=0;
map<int,int> left;
map<int,int> right;
int ans=-1;
int suml=0;
for(int i=0;i<A.size();i++){
     if(A[i]=='1'){
        total++;
    }
    if(A[i]=='0'){
        left[i]=suml;
        ans=max(ans,suml);
        suml=0;
    }
    else{
       suml+=1;
    }
}
  ans=max(ans,suml);
suml=0;

for(int i=A.size()-1;i>=0;i--){
    if(A[i]=='0'){
        right[i]=suml;
        suml=0;
    }
    else{
       suml+=1;
    }
}

map<int,int>:: iterator itl,itr;
itl=left.begin();
itr=right.begin();
while(itl!=left.end())
{
 if(itl->second+itr->second<total && itl->second+itr->second+1>ans)
{
    ans=itl->second+itr->second+1;
} 
if(itl->second+itr->second==total &&itl->second+itr->second>=ans){
    ans=itl->second+itr->second;
}
itl++;
itr++;
}
return ans;
}
