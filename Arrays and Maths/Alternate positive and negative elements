/*Given an array of integers A, arrange them in an alternate fashion such that every non-negative number
is followed by negative and vice-versa, starting from a negative number, maintaining the order of appearance.
The number of non-negative and negative numbers need not be equal.

If there are more non-negative numbers they appear at the end of the array.
If there are more negative numbers, they too appear at the end of the array.

Note: Try solving with O(1) extra space.

Input Format

The first argument given is the integer array A.
Output Format

Return the modified array.
Constraints

1 <= length of the array <= 7000
-10^9 <= A[i] <= 10^9 
For Example

Input 1:
    A = [-1, -2, -3, 4, 5]
Output 1:
    [-1, 4, -2, 5, -3]

Input 2:
    A = [5, -17, -100, -11]
Output 2:
    [-17, 5, -100, -11]
*/
/*

The idea is to process array from left to right. While processing, 
find the first out of place element in the remaining unprocessed array.
An element is out of place if it is negative and at odd index, 
or it is positive and at even index. Once we find an out of place element, 
we find the first element after it with opposite sign.
We right rotate the subarray between these two elements (including these two).

Following is the implementation of above idea.
*/
void rightrotate(vector<int> &arr, int n, int outofplace, int cur) { 
    int tmp = arr[cur]; 
    for (int i = cur; i > outofplace; i--) 
        arr[i] = arr[i-1]; 
    arr[outofplace] = tmp; 
} 

vector<int> Solution::solve(vector<int> &arr) {
    int n = arr.size();
    int outofplace = -1; 
    for (int index = 0; index < n; index ++) { 
        if (outofplace >= 0) {
            if (((arr[index] >= 0) && (arr[outofplace] < 0)) || ((arr[index] < 0) && (arr[outofplace] >= 0))) { 
                rightrotate(arr, n, outofplace, index); 
                if (index - outofplace > 2) outofplace = outofplace + 2; 
                else    outofplace = -1; 
            } 
        }  
        if (outofplace == -1) {
            if (((arr[index] >= 0) && (!(index & 0x01))) || ((arr[index] < 0) && (index & 0x01))) { 
                outofplace = index; 
            } 
        } 
    } 
    return arr;
}
