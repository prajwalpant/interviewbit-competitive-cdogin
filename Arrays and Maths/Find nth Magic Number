/*

Given an integer A, find and return the A'th magic number. A magic number is defined as a number which can be expressed as a power of 5 or sum of unique powers of 5. First few magic numbers are 5, 25, 30(5 + 25), 125, 130(125 + 5), â€¦. 
Input Format
The only argument given is integer A.
Output Format
Return the A'th magic number.
Constraints
1 <= A <= 5000
For Example
Input 1:
    A = 10
Output 1:
    650

Input 2:
    A = 3
Output 2:
    30
*/
/*
If we notice carefully the magic numbers can be represented as 001, 010, 011, 100, 101, 110 etc, 
where 001 is 0*pow(5,3) + 0*pow(5,2) + 1*pow(5,1). 
So basically we need to add powers of 5 for each bit set in given integer n.
*/
int Solution::solve(int A) {
vector<int> binary;
int rem=0;
int i=0;
while(A>0)
{
  rem=A%2;
binary.push_back(rem);
  A=A/2;
  i++;
}
reverse(binary.begin(),binary.end());
int ans=0;
for(int i=0;i<binary.size();i++){
    ans+=binary[i]*pow(5,binary.size()-i);
}
return ans;


    
    
    
    
    
    
    
    
}
