/*
Given an integer A, we call k >= 2 a good base of A, if all digits of A base k are 1. Now given a string representing A, you should return the smallest good base of A in string format. 
Input Format
The only argument given is the string representing A.
Output Format
Return the smallest good base of A in string format.
Constraints
3 <= A <= 10^18
For Example
Input 1:
    A = "13"
Output 1:
    "3"     (13 in base 3 is 111)

Input 2:
    A = "4681"
Output 2:
    "8"     (4681 in base 8 is 11111).
*/
/*
Firstly, convert string A to number n using stroll().
We use stoll() as we need long long int.
Now, we need to find base k for number n such that n base k is always “111…”.
Some math for the problem:
We can represent n as:
n = k^m + k^(m-1) +…+ 1
where m is length of n base k
Now, m can be between 2 and 62.
(As using the smallest base i.e. base 2, we can represent all numbers upto 10^18 in 62 digits).
We can observe that a smaller base will have a larger m.
So starting from m = 62, iterating upto m = 3, we need to find k where n base k is “111…”.
The moment we find k we return it. If k not found yet, then m = 2 and k = n-1(trivial case
Lets, find k for a particular m. [1]
let GP -> k^m + k^m-1 + … + 1
if GP == n, then we have found the answer.
else if GP < n, increase k
else GP > n, decrease k
Pseudocode
n -> A in long long int form
m-> length of n base k
k-> base
Iterate over m from (62 to 3)
Binary search for k (can be from 2 to n-1). //using [1]
If (k found) return k
end iteration for m
If (k not found till now) return n-1 //trivial case
*/
long long  __binary_search(long long low,long long high,long long length,long long number)
{
  while(low<=high)
  {
 long long mid=low+(high-low)/2;
 long long  check_base=((long long)pow(mid,length)-1)/(long long)(mid-1);
  if(check_base==number)
  {
      return mid;
  }
  else if(check_base>number)
  {
      high=mid-1;
  }
  else
  {
    low=mid+1;
  }
  }
  return -1;
}
string Solution::solve(string A) 
{
   
long long number=stoll(A);
//cout<<number<<" ";
long long  min_length=3;
long long  max_length=(log(number)/log(2))+1;
//cout<<max_length<<" ";
long long  low=2;
long long  high=number-1;
//long long ans=INT_MAX;
//bool chk=false;
for(long long i=max_length;i>=min_length;i--)
{
   long long get_base=__binary_search(low,high,i,number);
  
   if(get_base!=-1)
   {
   //chk=true;
  // cout<<"TTT ";
   //break;
  string l=to_string(get_base);
  return l;
   }
   
}
return to_string(number-1);
}
