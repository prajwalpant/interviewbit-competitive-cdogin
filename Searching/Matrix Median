/*
Matrix Median
Given a matrix of integers A of size N x M in which each row is sorted. Find an return the overall median of the matrix A. Note: No extra memory is allowed. Note: Rows are numbered from top to bottom and columns are numbered from left to right. 
Input Format
The first and only argument given is the integer matrix A.
Output Format
Return the overall median of the matrix A.
Constraints
1 <= N, M <= 10^5
1 <= N*M  <= 10^6
1 <= A[i] <= 10^9
N*M is odd
For Example
Input 1:
    A = [   [1, 3, 5],
            [2, 6, 9],
            [3, 6, 9]   ]
Output 1:
    5
Explanation 1:
    A = [1, 2, 3, 3, 5, 6, 6, 9, 9]
    Median is 5. So, we return 5.

Input 2:
    A = [   [5, 17, 100]    ]
Output 2:
    17
*/
/*
First we find the minimum and maximum elements in the matrix. Minimum element can be easily found by comparing
the first element of each row, and similarly the maximum
element can be found by comparing the last element of each row.
Then we use binary search on our range of numbers from minimum to maximum,
we find the mid of the min and max, and get count of numbers less than our mid. 
And accordingly change the min or max.
For a number to be median, there should be (r*c)/2 numbers smaller than that number. 
So for every number, we get the count of numbers less than that by using upper_bound() in each row of matrix, 
if it is less than the required count, the median must be greater than the selected number,
else the median must be less than or equal to the selected number.
//only that number satisfies this half one side and half other side condn which is presen in the matrix
//no other can satisfy that
*/

int Solution::findMedian(vector<vector<int> > &A) {
    int r=A.size(),c=A[0].size();
    int req=(r*c+1)/2;
    int minm=INT_MAX,maxm=INT_MIN;
    for(int i=0;i<r;i++){
        minm=min(minm,A[i][0]);
        maxm=max(maxm,A[i][c-1]);
    }
    while(minm<maxm){
        int mid=minm+(maxm-minm)/2;
        int place=0;
        for(int i=0;i<r;i++)
          place+=upper_bound(A[i].begin(),A[i].end(),mid)-A[i].begin();
         
        if(place<req) minm=mid+1;
        else maxm=mid;
    }
    return minm;
}
