/*
Square Root of Integer
Given an integar A. Compute and return the square root of A. If A is not a perfect square, return floor(sqrt(A)). DO NOT USE SQRT FUNCTION FROM STANDARD LIBRARY 
Input Format
The first and only argument given is the integer A.
Output Format
Return floor(sqrt(A))
Constraints
1 <= A <= 10^9
For Example
Input 1:
    A = 11
Output 1:
    3

Input 2:
    A = 9
Output 2:
    3

*/

//just do the binary seach on the search cpace and check mid every time by squaring it whetehr it is equal to the 
//number or not
//and move low and high accordingly
int __binarysearch(long long low,long long high,long long number)
{
    long long int mid;
   while(low<=high)
   {
       mid=low+(high-low)/2;
      
       if(mid*mid<=number && (mid+1)*(mid+1)>number)
       {
           return (int)mid;
         }
        else{
             
           if(mid*mid<number)
           {
               low=mid+1;
           }  
           else{
               high=mid-1;
           }
      }
       
       
   } 

}
int Solution::sqrt(int A) {
return __binarysearch(0,A,A);
}
