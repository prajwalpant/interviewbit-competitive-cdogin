/*
Aggressive cows
Farmer John has built a new long barn, with N stalls. Given an array of integers A of size N where each element of the array represents the location of the stall, and an integer B which represent the number of cows. His cows don't like this barn layout and become aggressive towards each other once put into a stall. To prevent the cows from hurting each other, John wants to assign the cows to the stalls, such that the minimum distance between any two of them is as large as possible. What is the largest minimum distance? 
Input Format
The first argument given is the integer array A.
The second argument given is the integer B.
Output Format
Return the largest minimum distance possible among the cows.
Constraints
2 <= N <= 100000
0 <= A[i] <= 10^9
2 <= B <= N
For Example
Input 1:
    A = [1, 2, 3, 4, 5]
    B = 3
Output 1:
    2

Input 2:
    A = [5, 17, 100, 11]
    B = 2
Output 2:
    95
*/
//HERE WE ARE DOING BINARY SEARCH ON THE SEARCH SPACE 
//I.E THE MINIMUM DISTANCE AND MAXIMUM DISTANCE B/W THE COWS
//YOU CAN BINARY SEARCH ON THE GIVEN CONSTRAINT 0 TO 10^9
//your mid is the minimum distance between the cows now you check whether you can  accomodate this distance
//with given number of cows if yes update the distance accordingly do low=mid+1
//if you are not able to accomodate minimise the distance by doing high=mid-1;

bool cows_can_stay(int min_dist,vector<int>&A,int cows)
{
 int count=1;
 int temp=A[0];
 for(int i=1;i<A.size();i++)
 {
   if(A[i]-temp>=min_dist)
   {
      temp=A[i];
      count++;
   }
   else continue;
 }
 if(count>=cows)
     return true;
 return false;
}
void binary_search(int low,int high ,vector<int> &A,int cows,int& ans)
{ 
    while(low<=high)
    {
   int mid=low+(high-low)/2;
   if(cows_can_stay(mid,A,cows))
   {
       low=mid+1;
       ans=max(ans,mid);
   }
   else 
   high=mid-1;
    }
}
int Solution::solve(vector<int> &A, int B) 
{
 int low=0;
 int high=1000000000;
 int cows=B;
 int ans=INT_MIN;
 sort(A.begin(),A.end());
 binary_search(low,high,A,cows,ans);
 return ans;
}
