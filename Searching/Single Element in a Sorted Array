/*Single Element in a Sorted Array
Given a sorted array of integers A where every element appears twice except for one element which appears once, find and return this single element that appears only once. 
Input Format
The only argument given is the integer array A.
Output Format
Return the single element that appears only once.
Constraints
1 <= length of the array <= 100000
1 <= A[i] <= 10^9 
For Example
Input 1:
    A = [1, 1, 2, 2, 3]
Output 1:
    3

Input 2:
    A = [5, 11, 11, 100, 100]
Output 2:
    5
    */
// as every number appears two times and one number appears single time
//each time when you find a mid just check on previous and the number which comes after if it satisifies then that is the answer
//if not then moves towards the half which has odd no of elements left
int binary_search(int low,int high,vector<int> &A)
{
int leftcount,rightcount;
int save;
int mid;
while(low<=high){
    mid=(low+high)/2;
   if(A[mid+1]!=A[mid] && A[mid-1]!=A[mid]) 
    {
        return A[mid];
    }
    if(A[mid]==A[mid-1])
    {
        mid--;
    }
    leftcount=mid-1;
    rightcount=high-mid-1;
    if(rightcount%2!=0)
    {
      low=mid+2;  
    }
    if(leftcount%2!=0){
      high=mid-1;  
    }
}
}
int Solution::solve(vector<int> &A) 
{
if(A.size()==0){
    return 0;
}
//this thing is used to avoid errors like when we go out of bond in array
A.insert(A.begin(),INT_MIN);
A.push_back(INT_MIN);
 int low=1;
 int high=A.size()-2;
 int ans=binary_search(low,high,A);
 return ans;
}
