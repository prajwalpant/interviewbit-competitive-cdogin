/*
Largest Rectangle in Histogram
Given an array of integers A of size N. A represents a histogram i.e A[i] denotes height of the ith histogram's bar. Width of each bar is 1. Largest Rectangle in Histogram: Example 1 Above is a histogram where width of each bar is 1, given height = [2,1,5,6,2,3]. Largest Rectangle in Histogram: Example 2 The largest rectangle is shown in the shaded area, which has area = 10 unit. Find the area of largest rectangle in the histogram. 
Input Format
The only argument given is the integer array A.
Output Format
Return the area of largest rectangle in the histogram.
For Example
Input 1:
    A = [2, 1, 5, 6, 2, 3]
Output 1:
    10
    Explanation 1:
        The largest rectangle is shown in the shaded area, which has area = 10 unit.
*/
//you have to find the range using stack whenever you get a 
//histogram if greater height push it  into stack
//and when you get a histogram of smaller height pop till you get a histogram
//of lower heigth then the current histogram you are in this way you can find the range if the rectangle
int Solution::largestRectangleArea(vector<int> &A)
{
vector<int> mystack;
int i; 
int ans=INT_MIN,h,w;
for(i=0;i<A.size();i++)
{
 if(mystack.empty())
 {
     mystack.push_back(i);
 }      
 else if(A[i]>=A[mystack.back()])
 {
    mystack.push_back(i);
 }
 else
{
   while(A[i]<A[mystack.back()])
   {
      h=A[mystack.back()];
     mystack.pop_back();
     if(mystack.empty()){
         ans=max(ans,h*i);
         break;
     }
     else{
     w=i-mystack.back()-1;
     ans=max(ans,h*w);
      }
   }
   mystack.push_back(i);
}
}
while(!mystack.empty())
{
   h=A[mystack.back()];
     mystack.pop_back();
     if(mystack.empty()){
         ans=max(ans,h*i);
         break;
     }
     else{
     w=i-mystack.back()-1;
     ans=max(ans,h*w);
      }
   }

return ans;
  
}
