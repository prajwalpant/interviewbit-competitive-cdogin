/*
First negative integer in window size B
Given an array of integers A of size N and an integer B. Find the first negative integer for each and every window(contiguous subarray) of size B. If a window does not contain a negative integer, then return 0 for that window. 
Input Format
The arguments given are integer array A and integer B.
Output Format
Return an integer array of size N+1-B representing answer of the ith window.
Constraints
1 <= length of the array <= 200000
-10^9 <= A[i] <= 10^9 
For Example
Input 1:
    A = [-1, 2, 3, -4, 5]
    B = 2
Output 1:
    [-1, 0, -4, -4] 

Input 2:
    A = [-8, 2, 3, -6, 10]
    B = 2
Output 2:
    [-8, 0, -6, -6]
*/

//slide the window using queue
vector<int> Solution::solve(vector<int> &A, int B) 
{
    int i=0,j=0;
    queue<int> q;
    vector<int> ans;
    while(j<B)
    {
        if(A[j]<0)
        {
            q.push(j);
        }
        j++;
    }
    j=B-1;
    while(j<A.size())
    {
    if(j-i+1==B)
    {
        if(q.empty())
        {
       ans.push_back(0);
         }  
         else
         {
             ans.push_back(A[q.front()]);
         }
         j++;
    }
    else
    {
        i++;
        if(i>q.front()&&q.empty()==false)
        {
            q.pop();
        }
         if(A[j]<0)
         {
             q.push(j);
         }
    }
   }
return ans;
}


